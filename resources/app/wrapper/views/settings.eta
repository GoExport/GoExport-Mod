<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8"/>
		<link rel="icon" href="/favicon.ico" type="image/png" />
		<title>Settings - Wrapper: Offline</title>
		<meta name="description" content="Wrapper: Offline's settings"/>
		<link rel="stylesheet" type="text/css" href="/pages/css/global.css"/>
		<link rel="stylesheet" type="text/css" href="/pages/css/importer.css"/>
		<script src="/pages/js/jquery.js"></script>
		<script src="/pages/js/global.js"></script>
		<script>const IS_STUDIO = false;</script>
	</head>

	<body>
		<%~ includeFile("./includes/header", { env: it.env }) %>

		<main>			
			<nav class="tabs_contain">
				<div class="tab_buttons">
					<h1 id="settings">Settings</h1>
					<a href="#" class="selected" data-triggers="0">Features</a>
					<a href="#" data-triggers="1">Appearance</a>
					<a href="#" data-triggers="2">Your Library</a>
					<a href="#" data-triggers="3">GoExport</a>
				</div>
				<nav class="tab" style="display:block">
					<h2>Features</h2>

					<h3>Discord rich presence</h3>
					<p>It's used to show when you're using Wrapper: Offline in your "Playing A Game" status on Discord,<br/>
					much like how lots of modern computer games will show on your Discord status when you're playing<br/>
					them. Turning this off will make Offline stop saying when you're using it on Discord.</p>
					<input class="setting" type="checkbox" id="DISCORD_RPC"></input>

					<h3>Truncated themelist</h3>
					<p>Cuts down the amount of themes that clog up the themelist in the videomaker.<br/>
					Keeping this off is highly suggested.<br/>
					However, if you want to see everything the program has to offer, turn this on.</p>
					<input class="setting" type="checkbox" id="TRUNCATED_THEMELIST"></input>

					<h3>Show waveforms</h3>
					<p>By default, waveforms for audio are generated in the video editor.<br/>
					While useful, the editor freezes while it generates, which could be too annoying or slow for some.<br/>
					Turning this off will simply add a repeating pre-made pattern in place of true waveforms.</p>
					<input class="setting" type="checkbox" id="SHOW_WAVEFORMS"></input>
					
					<h3>Default watermark</h3>
					<p>The Video Player has 4 choices for default watermarks.<br/>
					Default watermarks are shown when you choose a Go!Animate watermark.</p>
					<select class="setting" id="DEFAULT_WATERMARK">
						<option value="default">GoAnimate</option>
						<option value="twoLines">Go Make Your Own</option>
						<option value="g4s">GoAnimate For Schools</option>
						<option value="freeTrial">Free Trial</option>
					</select>

					<h3>14:9 or 16:9 aspect ratio</h3>
					<p>By default, the Video Player uses the 16:9 aspect ratio<br/>
					However, you can toggle this setting to make it 14:9, like a video<br/>
					made with Vyond before 2014.</p>
					<select class="setting" id="IS_WIDE">
						<option value="0">14:9</option>
						<option value="1">16:9</option>
					</select>
				</nav>
				<nav class="tab">
					<h2>Appearance</h2>

					<h3>Dark mode</h3>
					<p>Self-explanatory. Makes the Video List dark.</p>
					<input class="setting" type="checkbox" id="DARK_MODE" data-local="true"></input>
				</nav>
				<nav class="tab">
					<h2>Your Library</h2>

					<nav id="importer">
						<nav id="import_head">
							<button id="import-toggle" onclick="document.getElementById('importer-files').click()" class="import-button">UPLOAD FILES</button>
							<form>
								<input id="importer-files" type="file" name="file" title="Upload Files" accept=".mp3,.wav,.ogg,.wma,.swf,.gif,.png,.jpg,.mp4" style="display:none" />
							</form>
						</nav>
						<div id="importer-queue"></div>
					</nav>
				</nav>
				<nav class="tab">
					<h2>GoExport</h2>
					<p>These settings integrate into GoExport. <strong>Make sure you have it installed and added to your path and add it as a protocol (use goexport://) the installer for Windows should do it for you.</strong></p>
					
					<h3>Aspect Ratio</h3>
					<p>The aspect ratio determines how wide your video should be, by default it will be 16:9 (widescreen).</p>
					<select class="setting" id="GE_ASPECT">
						<option value="4:3">Standard (4:3)</option>
						<option value="14:9">Classic (14:9)</option>
						<option value="16:9">Widescreen (16:9)</option>
						<option value="9:16">Vertical (9:16)</option>
					</select>

					<h3>Resolution</h3>
					<p>The resolution is based on aspect ratio and determines how big the frame of the video should be. It is influenced directly by the aspect ratio. Default is 720p.</p>
					<select class="setting" id="GE_RESOLUTION"></select>

					<h3>Should GoExport open folder after export?</h3>
					<p>By default, GoExport will not open the folder after exporting a video.</p>
					<input class="setting" type="checkbox" id="GE_OPEN_FOLDER"></input>

					<h3>Should GoExport add an outro to exported videos?</h3>
					<p>By default, GoExport will add an outro to exported videos.</p>
					<input class="setting" type="checkbox" id="GE_OUTRO"></input>
				</nav>
			</nav>
		</main>

		<%~ includeFile("./includes/footer", { env: it.env }) %>
	</body>

	<script src="/pages/js/importer.js"></script>
	<script src="/pages/js/filesize.js"></script>
	<script>
		new AssetImporter(importer);
		// this is a mess of type conversion

		/**
		 * list
		 */
		let list = [];
		for (const elem of $(".setting")) list.push(elem.id);

		$.getJSON("/api/settings/list", (d) => {
			for (const [key, val] of Object.entries(d)) {
				const index = list.indexOf(key);
				if (index < 0) {
					continue;
				}
				list.splice(index, 1);
				show(key, val);
			}
			// get local settings
			list.forEach((key) => {
				show(key, localStorage.getItem(key) == "true");
			});
			
			// Initialize resolution options after settings are loaded
			const aspectRatio = d.GE_ASPECT || "16:9";
			const currentResolution = d.GE_RESOLUTION;
			updateResolutionOptions(aspectRatio, currentResolution);
		});
		$.getJSON("/api/assets/list", (d) => {
			for (const info of d) {
				switch (info.type) {
					case "bg":
					case "prop": {
						$(`
							<div class="importer_asset">
								<div class="asset_metadata">
									<img class="asset_preview" src="${
										info.id.includes("swf") ? 
											"/pages/img/importer/image.png" : 
											info.subtype == "video" ? 
												"/pages/img/importer/video.png" :
												`/assets/${info.id}`
									}" />
									<div>
										<h4 class="asset_name">${info.title}</h4>
										<p class="asset_subtype">${info.type} | ${info.subtype}</p>
									</div>
								</div>
							</div>
						`).appendTo($("#importer-queue"));
						break;
					}
					case "sound": {
						$(`
							<div class="importer_asset">
								<div class="asset_metadata">
									<img class="asset_preview" src="/pages/img/importer/sound.png" />
									<div>
										<h4 class="asset_name">${info.title}</h4>
										<p class="asset_subtype">${info.type} | ${info.subtype}</p>
									</div>
								</div>
							</div>
						`).appendTo($("#importer-queue"));
						break;
					}
				}
			}
		});

		/**
		 * toggle
		 */
		$(".setting").on("change", (event) => {
			const elem = $(event.target);
			const setting = elem.attr("id");
			const value = elem.prop("tagName") == "SELECT" ? 
				elem.val() : elem.prop("checked");

			if (elem.attr("data-local") == "true") {
				if (elem.attr("id") == "DARK_MODE") toggleDarkMode();
				localStorage.setItem(setting, value);
			} else {
				$.post("/api/settings/update", { setting, value })
					.done((d) => {
						if (d.status != "ok") {
							alert("That didn't work.");
							return;
						}
					});
			}
			show(setting, value);
		});

		function show(key, value) {
			const elem = $(`#${key}`);

			if (elem.prop("tagName") == "SELECT") {
				elem.find(`option[value='${value}']`).prop("selected", true);
			} else {
				elem.prop("checked", value);
			}
		}

		// Resolution options for different aspect ratios
		const resolutionOptions = {
			"16:9": { // 16:9
				"360p": "360p",
				"480p": "480p", 
				"720p": "720p (Recommended)",
				"1080p": "1080p",
				"2k": "2K",
				"4k": "4K",
				"5k": "5K",
				"8k": "8K"
			},
			"14:9": { // 14:9
				"360p": "360p",
				"480p": "480p",
				"720p": "720p (Recommended)",
				"1080p": "1080p",
				"2k": "2K",
				"4k": "4K", 
				"5k": "5K",
				"8k": "8K"
			},
			"9:16": { // 9:16
				"360p": "360p",
				"480p": "480p",
				"720p": "720p (Recommended)",
				"1080p": "1080p",
				"2k": "2K",
				"4k": "4K",
				"5k": "5K", 
				"8k": "8K"
			},
			"4:3": { // 4:3
				"240p": "240p",
				"360p": "360p",
				"420p": "420p",
				"480p": "480p (Recommended)"
			}
		};

		// Function to update resolution options based on aspect ratio
		function updateResolutionOptions(aspectRatio, preserveResolution = null) {
			const resolutionSelect = $("#GE_RESOLUTION");
			const currentValue = preserveResolution || resolutionSelect.val();
			const options = resolutionOptions[aspectRatio];
			
			// Clear current options
			resolutionSelect.empty();
			
			// Add new options
			for (const [value, label] of Object.entries(options)) {
				resolutionSelect.append($('<option>', {
					value: value,
					text: label
				}));
			}
			
			let newValue;
			// Try to maintain the current selection if it exists in new options
			if (options[currentValue]) {
				newValue = currentValue;
			} else {
				// Default to 720p if available, otherwise first option
				if (options["720p"]) {
					newValue = "720p";
				} else {
					newValue = Object.keys(options)[0];
				}
			}
			
			// Set the new value
			resolutionSelect.val(newValue);
			
			// Update the settings on the backend if the resolution changed and this is not initial load
			if (preserveResolution === null && newValue !== currentValue) {
				$.post("/api/settings/update", { setting: "GE_RESOLUTION", value: newValue })
					.done((d) => {
						if (d.status != "ok") {
							console.error("Failed to update GE_RESOLUTION setting");
						}
					})
					.fail(() => {
						console.error("Failed to update GE_RESOLUTION setting");
					});
			}
		}

		// Listen for aspect ratio changes
		$("#GE_ASPECT").on("change", function() {
			updateResolutionOptions($(this).val());
		});
	</script>
</html>
